/*
 File: i18n-generate-keys.mjs
 Purpose: Generate TypeScript union of i18n keys from catalog tree into
 src/shared/i18n/generated/keys.ts. Deterministic sorted output.
 All Rights Reserved. Arodi Emmanuel
*/
import { readdirSync, readFileSync, writeFileSync, mkdirSync } from 'node:fs'
import { join } from 'node:path'

const root = join(process.cwd(), 'src', 'shared', 'i18n', 'catalog')

function collectKeys(dir) {
  const entries = readdirSync(dir, { withFileTypes: true })
  let out = []
  for (const e of entries) {
    const full = join(dir, e.name)
    if (e.isDirectory()) out = out.concat(collectKeys(full))
    else if (e.isFile() && e.name.endsWith('.ts')) {
      const txt = readFileSync(full, 'utf8')
      const matches = txt.match(/'ui\.[^']+'/g) || []
      for (const m of matches) out.push(m.slice(1, -1))
    }
  }
  return out
}

const locales = readdirSync(root).filter((d) => !d.startsWith('.'))
const allKeys = new Set()
for (const loc of locales) {
  collectKeys(join(root, loc)).forEach((k) => allKeys.add(k))
}

const sorted = [...allKeys].sort()
const header = [
  '/*',
  ' File: keys.ts',
  ' Purpose: Autogenerated i18n key union. DO NOT EDIT MANUALLY.',
  ' All Rights Reserved. Arodi Emmanuel',
  '*/',
  '',
].join('\n')
const body = [
  header,
  'export type I18nKey =',
  ...sorted.map((k, i) => `  | '${k}'${i === sorted.length - 1 ? '' : ''}`),
  '',
  'export const I18N_KEYS: readonly I18nKey[] = [',
  ...sorted.map((k, i) => `  '${k}'${i === sorted.length - 1 ? '' : ','}`),
  '] as const',
  '',
].join('\n')

const genDir = join(process.cwd(), 'src', 'shared', 'i18n', 'generated')
mkdirSync(genDir, { recursive: true })
writeFileSync(join(genDir, 'keys.ts'), body, 'utf8')
