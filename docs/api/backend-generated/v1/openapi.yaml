openapi: 3.0.1
info:
  title: Poetry API
  license:
    name: Proprietary
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearerAuth: []
tags:
- name: users
  description: User management
- name: seller-codes
  description: Seller code management
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - users
      summary: Get user by ID
      description: Retrieve single user with ETag for caching
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
    put:
      tags:
      - users
      summary: Update user
      description: Update user with optimistic locking via If-Match
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: If-Match
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        required: true
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "200":
          description: Successfully updated
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "409":
          description: Version conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
    delete:
      tags:
      - users
      summary: Delete user
      description: Soft delete user with optimistic locking
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: If-Match
        in: header
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Not found
        "403":
          description: Forbidden
        "409":
          description: Version conflict
        "401":
          description: Unauthorized
  /api/v1/tokens/selection:
    put:
      tags:
      - ui-tokens-controller
      operationId: updateSelection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSelectionRequest"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/themes/{id}:
    get:
      tags:
      - theme-read-controller
      operationId: byId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeResponse"
    put:
      tags:
      - theme-update-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRequest"
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeResponse"
    delete:
      tags:
      - theme-delete-controller
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
  /api/v1/themes/{id}/activate:
    put:
      tags:
      - theme-activate-controller
      operationId: activate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeResponse"
  /api/v1/seller-codes/{id}:
    get:
      tags:
      - seller-codes
      summary: Get seller code by ID
      description: Retrieve single seller code with ETag for caching
      operationId: getSellerCodeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "200":
          description: Seller code found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
    put:
      tags:
      - seller-codes
      summary: Update seller code
      description: Update seller code with optimistic locking via If-Match
      operationId: updateSellerCode
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: If-Match
        in: header
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SellerCodeUpdateRequest"
        required: true
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "200":
          description: Successfully updated
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "409":
          description: Version conflict
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "400":
          description: Invalid request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
    delete:
      tags:
      - seller-codes
      summary: Delete seller code
      description: Soft delete seller code with optimistic locking
      operationId: deleteSellerCode
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: If-Match
        in: header
        required: false
        schema:
          type: string
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Not found
        "403":
          description: Forbidden
        "409":
          description: Version conflict
        "401":
          description: Unauthorized
  /api/v1/fonts/{key}:
    get:
      tags:
      - font-read-controller
      operationId: byKey
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FontResponse"
    put:
      tags:
      - font-update-controller
      operationId: update_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFontRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FontResponse"
    delete:
      tags:
      - font-delete-controller
      operationId: delete_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/dashboard/{id}:
    get:
      tags:
      - dashboard-controller
      operationId: getDashboard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DashboardResponse"
    put:
      tags:
      - dashboard-mutation-controller
      operationId: updateDashboard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDashboardRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DashboardResponse"
    delete:
      tags:
      - dashboard-mutation-controller
      operationId: deleteDashboard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/v1/users:
    get:
      tags:
      - users
      summary: List all users
      description: Retrieve all users with ETag for caching
      operationId: listUsers
      responses:
        "200":
          description: Users list
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
    post:
      tags:
      - users
      summary: Create a new user
      description: Create user with role assignment
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/v1/themes:
    get:
      tags:
      - theme-read-controller
      operationId: list
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ThemeResponse"
    post:
      tags:
      - theme-create-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRequest"
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeResponse"
  /api/v1/seller-codes:
    get:
      tags:
      - seller-codes
      summary: List all seller codes
      description: Retrieve all seller codes with ETag for caching
      operationId: listSellerCodes
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SellerCodeResponse"
        "200":
          description: Seller codes list
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SellerCodeResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SellerCodeResponse"
    post:
      tags:
      - seller-codes
      summary: Create a new seller code
      description: Create seller code with user assignment
      operationId: createSellerCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SellerCodeCreateRequest"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "400":
          description: Invalid request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SellerCodeResponse"
  /api/v1/me/password:
    post:
      tags:
      - me-password-controller
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChangeRequest"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/fonts:
    get:
      tags:
      - font-read-controller
      operationId: list_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FontResponse"
    post:
      tags:
      - font-create-controller
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFontRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FontResponse"
  /api/v1/dashboard:
    get:
      tags:
      - dashboard-controller
      operationId: getDashboards
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DashboardResponse"
    post:
      tags:
      - dashboard-mutation-controller
      operationId: createDashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDashboardRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DashboardResponse"
  /api/v1/auth/register:
    post:
      tags:
      - auth-controller
      operationId: register
      parameters:
      - name: Idempotency-Key
        in: header
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterEnvelope"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/auth/refresh:
    post:
      tags:
      - auth-controller
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TokenResponse"
  /api/v1/auth/logout:
    post:
      tags:
      - auth-controller
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/auth/login:
    post:
      tags:
      - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TokenResponse"
  /api/v1/admin/echo:
    post:
      tags:
      - admin-echo-controller
      operationId: echo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EchoRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EchoResponse"
  /v1/i18n/messages/{key}:
    get:
      tags:
      - i-18n-controller
      operationId: message
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /v1/i18n/locales:
    get:
      tags:
      - i-18n-controller
      operationId: locales
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocalesResponse"
  /api:
    get:
      tags:
      - api-index-controller
      operationId: index
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/v1/tokens:
    get:
      tags:
      - ui-tokens-controller
      operationId: getTokens
      parameters:
      - name: If-None-Match
        in: header
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UITokensDto"
  /api/v1/themes/active:
    get:
      tags:
      - theme-read-controller
      operationId: active
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeResponse"
  /api/v1/roles:
    get:
      tags:
      - roles-controller
      operationId: listRoles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleDto"
  /api/v1/me/locale:
    get:
      tags:
      - me-locale-controller
      operationId: getLocale
      parameters:
      - name: X-User-Id
        in: header
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LocaleDto"
  /api/v1/health:
    get:
      tags:
      - versioned-placeholder-controller
      operationId: health
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/v1/dashboard/overview:
    get:
      tags:
      - dashboard-overview-controller
      operationId: overview
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DashboardOverviewResponse"
  /api/v1/auth/status:
    get:
      tags:
      - auth-status-controller
      operationId: status
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StatusResponse"
  /api/v1/auth/me:
    get:
      tags:
      - me-controller
      operationId: me
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri
        properties:
          type: object
          additionalProperties:
            type: object
    UserUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
          description: First name
          example: John
        lastName:
          type: string
          description: Last name
          example: Doe
        email:
          type: string
          description: Email address
          example: john.doe@example.com
        locale:
          type: string
          description: Locale code
          example: en
        roles:
          uniqueItems: true
          type: array
          description: User roles
          example:
          - admin
          - user
          items:
            type: string
            description: User roles
            example: "[\"admin\",\"user\"]"
        active:
          type: boolean
          description: Active status
      description: User update request
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          format: int64
          example: 1
        firstName:
          type: string
          description: First name
          example: John
        lastName:
          type: string
          description: Last name
          example: Doe
        email:
          type: string
          description: Email address
          example: john.doe@example.com
        username:
          type: string
          description: Username
          example: johndoe
        locale:
          type: string
          description: Locale code
          example: en
        active:
          type: boolean
          description: Active status
        roles:
          uniqueItems: true
          type: array
          description: User roles
          example:
          - admin
          - user
          items:
            type: string
            description: User roles
            example: "[\"admin\",\"user\"]"
      description: User response representation
    UpdateSelectionRequest:
      required:
      - font
      - fontSize
      - radius
      - shadow
      - spacing
      - theme
      type: object
      properties:
        theme:
          pattern: "^[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
        font:
          type: string
        fontSize:
          type: string
        spacing:
          type: string
        radius:
          type: string
        shadow:
          type: string
    UpdateRequest:
      type: object
      properties:
        name:
          type: string
        colors:
          type: object
          additionalProperties:
            type: string
    ThemeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        key:
          type: string
        name:
          type: string
        active:
          type: boolean
        colors:
          type: object
          additionalProperties:
            type: string
    SellerCodeUpdateRequest:
      type: object
      properties:
        code:
          type: string
          description: Seller code
          example: SC-2024-001
        organizationId:
          type: string
          description: Organization ID
          example: default-org
        userId:
          type: integer
          description: User ID owner
          format: int64
          example: 1
        status:
          type: string
          description: Current status
          example: active
      description: Update seller code request payload
    SellerCodeResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          format: int64
          example: 1
        code:
          type: string
          description: Seller code
          example: ADMIN-SC-001
        organizationId:
          type: string
          description: Organization ID
          example: default-org
        userId:
          type: integer
          description: User ID owner
          format: int64
          example: 1
        status:
          type: string
          description: Status
          example: active
        version:
          type: integer
          description: Version for locking
          format: int64
          example: 0
      description: Seller code response with all fields
    UpdateFontRequest:
      type: object
      properties:
        label:
          type: string
        woff2Url:
          type: string
        weights:
          type: array
          items:
            type: integer
            format: int32
        preloadDefault:
          type: boolean
        active:
          type: boolean
        integrity:
          type: string
    FontResponse:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        woff2Url:
          type: string
        weights:
          type: array
          items:
            type: integer
            format: int32
        hash:
          type: string
        preloadDefault:
          type: boolean
        active:
          type: boolean
        integrity:
          type: string
    UpdateDashboardRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string
    DashboardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
    UserCreateRequest:
      required:
      - email
      - firstName
      - lastName
      - password
      - username
      type: object
      properties:
        firstName:
          type: string
          description: First name
          example: John
        lastName:
          type: string
          description: Last name
          example: Doe
        email:
          type: string
          description: Email address
          example: john.doe@example.com
        username:
          type: string
          description: Username
          example: johndoe
        locale:
          type: string
          description: Locale code
          example: en
        password:
          type: string
          description: Password
          example: SecurePass123!
        roles:
          uniqueItems: true
          type: array
          description: User roles
          example:
          - user
          items:
            type: string
            description: User roles
            example: "[\"user\"]"
      description: User creation request
    CreateRequest:
      type: object
      properties:
        key:
          type: string
        name:
          type: string
        colors:
          type: object
          additionalProperties:
            type: string
    SellerCodeCreateRequest:
      type: object
      properties:
        code:
          type: string
          description: Seller code
          example: SC-2024-001
        organizationId:
          type: string
          description: Organization ID
          example: default-org
        userId:
          type: integer
          description: User ID owner
          format: int64
          example: 1
        status:
          type: string
          description: Initial status
          example: active
      description: Create seller code request payload
    PasswordChangeRequest:
      required:
      - currentPassword
      - newPassword
      type: object
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    CreateFontRequest:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        woff2Url:
          type: string
        weights:
          type: array
          items:
            type: integer
            format: int32
        hash:
          type: string
        preloadDefault:
          type: boolean
        integrity:
          type: string
    CreateDashboardRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string
    RegisterEnvelope:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/RegisterRequest"
    RegisterRequest:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    RefreshRequest:
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          format: int32
        username:
          type: string
    LoginRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    EchoRequest:
      required:
      - message
      type: object
      properties:
        message:
          maxLength: 512
          minLength: 1
          type: string
    EchoResponse:
      type: object
      properties:
        message:
          type: string
    LocalesResponse:
      type: object
      properties:
        locales:
          type: array
          items:
            type: string
    Current:
      type: object
      properties:
        theme:
          type: string
        font:
          type: string
        fontSize:
          type: string
        spacing:
          type: string
        radius:
          type: string
        shadow:
          type: string
    Font:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        woff2Url:
          type: string
        weights:
          type: array
          items:
            type: integer
            format: int32
        hash:
          type: string
        preloadDefault:
          type: boolean
        integrity:
          type: string
    FontSizeSet:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        sizes:
          type: object
          additionalProperties:
            type: string
    RadiusSet:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        values:
          type: object
          additionalProperties:
            type: string
    ShadowSet:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        values:
          type: object
          additionalProperties:
            type: string
    SpacingSet:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        values:
          type: object
          additionalProperties:
            type: string
    Theme:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        colors:
          type: object
          additionalProperties:
            type: string
    UITokensDto:
      type: object
      properties:
        themes:
          type: array
          items:
            $ref: "#/components/schemas/Theme"
        fonts:
          type: array
          items:
            $ref: "#/components/schemas/Font"
        fontWeights:
          type: array
          items:
            type: string
        fontSizes:
          type: array
          items:
            $ref: "#/components/schemas/FontSizeSet"
        spacings:
          type: array
          items:
            $ref: "#/components/schemas/SpacingSet"
        radius:
          type: array
          items:
            $ref: "#/components/schemas/RadiusSet"
        shadows:
          type: array
          items:
            $ref: "#/components/schemas/ShadowSet"
        current:
          $ref: "#/components/schemas/Current"
    RoleDto:
      type: object
      properties:
        key:
          type: string
        name:
          type: string
    LocaleDto:
      type: object
      properties:
        locale:
          type: string
    DashboardOverviewResponse:
      type: object
      properties:
        totalPoems:
          type: integer
          format: int32
        publishedPoems:
          type: integer
          format: int32
        draftPoems:
          type: integer
          format: int32
        activeMembers:
          type: integer
          format: int32
        highlightKey:
          type: string
        lastUpdatedLabel:
          type: string
    StatusResponse:
      type: object
      properties:
        authenticated:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
